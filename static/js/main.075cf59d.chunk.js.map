{"version":3,"sources":["types.ts","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","map","el","name","id","uuidv4","App","useState","isVisibleToggle","setIsVisibleToggle","isReversedToggle","setIsReversedToggle","none","sortBy","setSortBy","itemLength","setItemLength","showGoods","className","type","onClick","alph","length","value","onChange","event","target","goods","prepareGoods","sort","a","b","localeCompare","reverse","preparedGoods","good","Number","ReactDOM","render","document","getElementById"],"mappings":"6KAKYA,E,+DAAAA,O,mBAAAA,I,eAAAA,I,gBAAAA,M,gBCANC,EAA0B,CAC9B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UACAC,KAAI,SAAAC,GAAE,MAAK,CACXC,KAAMD,EACNE,GAAIC,kBAiJSC,EA9IO,WACpB,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAA4BJ,mBAASR,EAASa,MAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCP,mBAAS,KAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KAEMC,EAAY,WAChBR,GAAoBD,IAyCtB,OACE,qBAAKU,UAAU,MAAf,SACGV,EAEG,qCACE,sBAAKU,UAAU,eAAf,UACE,wBACEC,KAAK,SACLC,QAASH,EACTC,UAAU,0BAHZ,kBAOA,wBACEC,KAAK,SACLC,QArDE,WACdT,GAAqBD,IAqDTQ,UAAU,WAHZ,qBAOA,wBACEC,KAAK,SACLC,QAxDK,WACjBN,EAAUf,EAASsB,OAwDPH,UAAU,WAHZ,iCAOA,wBACEC,KAAK,SACLC,QA3DO,WACnBN,EAAUf,EAASuB,SA2DPJ,UAAU,WAHZ,4BAOA,wBACEC,KAAK,SACLC,QA9DA,WACZN,EAAUf,EAASa,MACnBD,GAAoB,IA6DRO,UAAU,0BAHZ,mBAOA,yBACEK,MAAOR,EACPS,SAAU,SAAAC,GACRT,EAAcS,EAAMC,OAAOH,QAE7BL,UAAU,cALZ,UAOE,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,uCACA,8CAGJ,oBAAIA,UAAU,YAAd,SAjFY,SAACS,GACrB,IAAMC,EAAY,YAAOD,GAiBzB,OAfAC,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQlB,GACN,KAAKd,EAASsB,KACZ,OAAOS,EAAE3B,KAAK6B,cAAcD,EAAE5B,MAChC,KAAKJ,EAASuB,OACZ,OAAOQ,EAAE3B,KAAKmB,OAASS,EAAE5B,KAAKmB,OAChC,QACE,OAAO,MAITZ,GACFkB,EAAaK,UAGRL,EAgEIM,CAAclC,GAAiBC,KAAI,SAAAkC,GAGlC,OAFkBA,EAAKhC,KAAKmB,QAAUc,OAAOrB,IAKzC,oBAEEG,UAAU,iBAFZ,SAIGiB,EAAKhC,MAHDgC,EAAK/B,YAYtB,qBAAKc,UAAU,uBAAf,SACE,wBACEC,KAAK,SACLC,QAASH,EACTC,UAAU,iBAHZ,wBCnJZmB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.075cf59d.chunk.js","sourcesContent":["export interface Good {\n  name: string;\n  id:string;\n}\n\nexport enum SortType {\n  length,\n  alph,\n  none,\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport { SortType, Good } from './types';\n\nconst goodsFromServer: Good[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n].map(el => ({\n  name: el,\n  id: uuidv4(),\n}));\n\nconst App: React.FC = () => {\n  const [isVisibleToggle, setIsVisibleToggle] = useState(false);\n  const [isReversedToggle, setIsReversedToggle] = useState(false);\n  const [sortBy, setSortBy] = useState(SortType.none);\n  const [itemLength, setItemLength] = useState('1');\n\n  const showGoods = () => {\n    setIsVisibleToggle(!isVisibleToggle);\n  };\n\n  const reverse = () => {\n    setIsReversedToggle(!isReversedToggle);\n  };\n\n  const sortByAlph = () => {\n    setSortBy(SortType.alph);\n  };\n\n  const sortByLength = () => {\n    setSortBy(SortType.length);\n  };\n\n  const reset = () => {\n    setSortBy(SortType.none);\n    setIsReversedToggle(false);\n  };\n\n  const preparedGoods = (goods: Good[]) => {\n    const prepareGoods = [...goods];\n\n    prepareGoods.sort((a, b) => {\n      switch (sortBy) {\n        case SortType.alph:\n          return a.name.localeCompare(b.name);\n        case SortType.length:\n          return a.name.length - b.name.length;\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversedToggle) {\n      prepareGoods.reverse();\n    }\n\n    return prepareGoods;\n  };\n\n  return (\n    <div className=\"App\">\n      {isVisibleToggle\n        ? (\n          <>\n            <div className=\"App__buttons\">\n              <button\n                type=\"button\"\n                onClick={showGoods}\n                className=\"App__btn App__btn--uniq\"\n              >\n                Hide\n              </button>\n              <button\n                type=\"button\"\n                onClick={reverse}\n                className=\"App__btn\"\n              >\n                Reverse\n              </button>\n              <button\n                type=\"button\"\n                onClick={sortByAlph}\n                className=\"App__btn\"\n              >\n                Sort alphabetically\n              </button>\n              <button\n                type=\"button\"\n                onClick={sortByLength}\n                className=\"App__btn\"\n              >\n                Sort by length\n              </button>\n              <button\n                type=\"button\"\n                onClick={reset}\n                className=\"App__btn App__btn--uniq\"\n              >\n                Reset\n              </button>\n              <select\n                value={itemLength}\n                onChange={event => {\n                  setItemLength(event.target.value);\n                }}\n                className=\"App__select\"\n              >\n                <option>1</option>\n                <option>2</option>\n                <option>3</option>\n                <option>4</option>\n                <option>5</option>\n                <option>6</option>\n                <option>7</option>\n                <option>8</option>\n                <option>9</option>\n                <option>10</option>\n              </select>\n            </div>\n            <ul className=\"App__list\">\n              {preparedGoods(goodsFromServer).map(good => {\n                const isVisible = good.name.length >= Number(itemLength);\n\n                return (\n                  isVisible\n                  && (\n                    <li\n                      key={good.id}\n                      className=\"App__list-item\"\n                    >\n                      {good.name}\n                    </li>\n                  )\n                );\n              })}\n            </ul>\n          </>\n        )\n        : (\n          <div className=\"App__start-container\">\n            <button\n              type=\"button\"\n              onClick={showGoods}\n              className=\"App__start-btn\"\n            >\n              Start\n            </button>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}